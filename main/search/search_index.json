{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>We're thrilled to have you here! As you embark on your journey into the world of blockchains, we've put together this documentation to support and guide you. Whether you're a seasoned team member or just starting out, we're dedicated to providing clarity on both simple and complex topics.</p> <p>Each team at our company has its own dedicated section in this documentation. Feel free to explore and learn about other teams' areas of expertise if you're curious.</p> <p>Our documentation is designed to complement, not replace, the official documentation and processes we already have in place. It serves as a quick reference and a knowledge store to support both new and experienced team members.</p> <p>Below, you'll find an overview of the different sections available to help you quickly navigate to the information you need:</p>"},{"location":"#specific-teams","title":"Specific Teams","text":"<ul> <li>Gnoland</li> </ul>"},{"location":"#knowledge-corner","title":"Knowledge Corner","text":"<ul> <li>Blockchains 101</li> <li>How to use Git</li> <li>The world of Cosmos</li> </ul> <p>If you have any questions or need further assistance, please don't hesitate to reach out to your team members.</p>"},{"location":"Discoveries/Gnoland-TPM-audit/","title":"Summary","text":"<p>@kouteki </p> <p>April 5, 2024</p>"},{"location":"Discoveries/Gnoland-TPM-audit/#objective","title":"Objective","text":"<p>As a new Technical Project Manager, understand how the Gno.land Core team operates, and provide a list of improvements to be implemented.</p> <p>The audit has reviewed the following: 1. Effectiveness of project processes 2. Clarity and efficiency of communication channels 3. Team's strengths and areas of improvements</p> <p>Methodology 1. Interview the Core team and external stakeholders 2. Observe the team communication and meetings 3. Review documentation, comm channels and project management tools </p>"},{"location":"Discoveries/Gnoland-TPM-audit/#results","title":"Results","text":"<p>The main gaps and opportunities for improvement identified in the audit 1. PR triage and reviews creating backlog and blockers 2. Lack of roadmap 3. Context switching 4. Meeting ownership 5. Jae's bandwidth for reviews and approval 6. Communication gap between technical and non-technical personnel</p> <p>Based on the findings, the list of proposed improvements we should focus on is the following: 1. Improve the PR review process 2. Introduce the roadmap 3. Own the meetings</p>"},{"location":"Discoveries/Gnoland-TPM-audit/#audit","title":"Audit","text":""},{"location":"Discoveries/Gnoland-TPM-audit/#communication","title":"Communication","text":"<p>Comm Tool Inventory &amp; effectiveness - GitHub is the primary communication and collaboration platform tool for the Core team. It serves great as a way to track engineering progress, discuss ideas and collaborate. There is a strong inclination to put on GitHub every idea, assets, findings (like this audit) as a way to run a fully open sourced project. - Signal is used internally by the Core team when communicating with Manfred and Jae. In rare instances Signal is used to contact Core team members outside working hours. - Slack is used internally for more structured communication between Core team members, as well as communication with the rest of the org. There's a plan to phase out Slack in favor of Matrix, which will allow us to move most Signal conversations to Matrix; no ETA for this at the moment. - Notion is used for cross-team project collaboration, and serves as a primary project board for non-technical teams. - Email is used rarely, primarily for company wide collaboration. - Hack.md is used primarily for document drafts before being published permanently on GitHub. Both being in markdown, it's a relatively straightforward transition. - Google Meet is where most of the internal meetings happen. - Discord is used for meetings which are open to the public.</p> <p>Gaps and bottlenecks in information flow - GitHub is hard to track for non-technical collaborators within the company. We're forced to compromise and by keeping cross-team efforts in Notion, as well as logging top level OKR in Notion. This created overhead and potential disparity in the info on Notion and GitHub (at least until we find a way to automate this) - Notion, on the other hand, is unsuitable tool for project management for the Core team because GitHub offers way more value with less effort. It's also against the open source philosophy of this project. - The Core team does not effectively communicate their progress/milestones to non-technical people in the company in a way they would understand. - Signal is a chat tool, and inefficient when trying to have multiple conversations, but is essential since it's the main comms channel to Jae and Manfred. In all other scenarios Slack is the de facto online collaboration tool for the Core team. - HackMD VS GitHub - there are no hard rules when to use one over another.</p>"},{"location":"Discoveries/Gnoland-TPM-audit/#current-processes","title":"Current Processes","text":""},{"location":"Discoveries/Gnoland-TPM-audit/#ideation","title":"Ideation","text":"<p>Ideation is primarily done async (GitHub issues, HackMD docs). Alternatively in online workshops and meetings. 1. When a team member has an idea, they create a GitHub issue to explain the challenge and how they plan to solve it. 2. If the issue doesn't get peer feedback, team member pings peers on one of the comms channels. 3. If the issue still doesn't get peer feedback, it's consigned indefinitely to the GitHub backlog.</p>"},{"location":"Discoveries/Gnoland-TPM-audit/#development","title":"Development","text":"<ol> <li>Every team member is more or less free to pick what they are working on. </li> <li>Once the work is started, the owner reports progress on a weekly basis.</li> <li>If the progress is not reported, however, the task drops off our radar, and there's no accountability.</li> </ol>"},{"location":"Discoveries/Gnoland-TPM-audit/#pr-reviews","title":"PR reviews","text":"<ol> <li>When a PR is ready for a review, the whole team is automatically added as reviewers</li> <li>There's no process on who reviews what. Team members choose randomly (~200 PRs are currently in the repo), or stick to familiar code.</li> <li>High priority PRs are mentioned in the comm channels, and put on agenda for the weekly PR review board.</li> <li>At least 2 reviews are generally needed, including at least 1 Core team member.</li> <li>If an issue needs Jae's approval, he is notified via comm channels, as well as on the weekly PR review.</li> <li>There is no special case handling for external contributors.</li> </ol>"},{"location":"Discoveries/Gnoland-TPM-audit/#documentation","title":"Documentation","text":"<ul> <li>docs.gno.land is the public technical documentation repository that's regularly maintained.</li> <li>HackMD is used to document weekly status updates, which are then deposited on GitHub</li> <li>HackMD is used to update implementation partners on a biweekly basis, which are then deposited on GitHub</li> <li>Town Hall updates are collected biweekly and posted on Notion, along with the town hall videos.</li> </ul>"},{"location":"Discoveries/Gnoland-TPM-audit/#team-dynamics","title":"Team Dynamics","text":""},{"location":"Discoveries/Gnoland-TPM-audit/#team-structure","title":"Team Structure","text":"<ul> <li>Cross-functional team, with individual members serving as silos of knowledge</li> <li>Composed exclusively of seniors</li> <li>Geographically distributed between US (Ray) and EU (Milo\u0161)</li> <li>EU team reports to Manfred, US to Jae</li> </ul>"},{"location":"Discoveries/Gnoland-TPM-audit/#communication_1","title":"Communication","text":"<ul> <li>Async: GitHub (issues and PRs), HackMD (private discussions), Slack, Signal (with Jae, Manfred)</li> <li>Sync: Core team worldwide sync (weekly), Developer Call (biweekly), Gno dev chat (weekly), GitHub review session (weekly), 1:1 (weekly/biweekly)</li> </ul>"},{"location":"Discoveries/Gnoland-TPM-audit/#conflict-resolution","title":"Conflict Resolution","text":"<p>Conflicts are resolved in a civil manner between participants. Escalations were needed solely for technical topics, and those escalations went to either Manfred or Jae, depending on the impact of the decision.</p>"},{"location":"Discoveries/Gnoland-TPM-audit/#meetings","title":"Meetings","text":"<p>Gno weekly world staff sync</p> <p>Result: a document containing progress done in the past 7 days Cycle: weekly Length: 1h Participants: Core team, DevRel Engagement rate (percentage of Core team attendees who actively participate vs those who just listen): 100% Optimal: Yes</p> <p>Gno dev chat</p> <p>Result: open ended discussion (coffee session) Cycle: weekly Length: 30min Participants: Euro Core team, DevRel Engagement rate: 30% Optimal: Yes</p> <p>Gno.land Developer Call (Core)</p> <p>Result: Progress update given by the Core team to the community, questions and concerns addressed Cycle: biweekly Length: 1h Participants: Core team, DevRel Engagement rate: 30-50% Optimal: Yes</p> <p>Gno.land Developer Call (Contributors)</p> <p>Result: Progress update given by contributors to the Core team and the community, questions and concerns addressed Cycle: biweekly Length: 1h Participants: Core team, DevRel Engagement rate: 30-50% Optimal: Yes</p> <p>Gno GitHub Review Session</p> <p>Result: Discussions and decisions made on specific PRs Cycle: weekly Length: 1h Participants: Core team, DevRel, Jae Engagement rate: 10-20% Optimal: No</p> <p>Observations</p> <ul> <li>Overall the meeting frequency and length are optimum</li> <li>There is opportunity to further improve the focus of some meetings. An example given by the team is the Developer Call; it has been restructured and agenda prepared ahead of time, resulting in better conversations and less time spent by the team.</li> <li>The only immediate issue is the Gno GitHub review session. Participation rate is very low, more often than not the agenda put forward is not followed, and the meeting derails into conversation on 1-2 topics that may or may not be related to the agenda.</li> </ul>"},{"location":"Discoveries/Gnoland-TPM-audit/#conclusions","title":"Conclusions","text":""},{"location":"Discoveries/Gnoland-TPM-audit/#pain-points-and-areas-for-improvement","title":"Pain Points and Areas for Improvement:","text":"<p>Based on the observations and interviews with the team members, I've put together a list of pain points and areas of improvement that I've identified as priority (in no particular order) 1. PR triage and reviews are creating a backlog and blockers. Triage process exists, but it's not enforced. Reviews aren't prioritized by impact. Some engineers are reluctant to review code they aren't very familiar with. As a result, the team often randomly selects PRs to review, or chooses based on the zone of comfort.  2. Lack of roadmap. The team wants to map their work against the roadmap, so they could understand which contributions are more relevant. The current roadmap is too high level and the feature set hasn't been locked in.  3. Context switching. Overlaps with the PR issue &amp; lack of roadmap. When a PR is reviewed after a 4-month delay, the PR author needs time to recall the context and resume the effort. And the lack of roadmap forces engineers to treat most issues equally, spending effort on trivial topics. 4. Meeting ownership. The team is strongly against unstructured meetings and bike shedding. This mostly happens in ad-hoc meetings. 5. Jae's bandwidth for reviews and approval. Overlaps with PR triage and reviews. The team feels it's hard to get Jae to approve or engage certain topics, and we need to be more effective with the time we have. 6. Communication gap between technical and non-technical personnel. Core team's internal communication is optimal, as well as communication with other technical teams like DevX. However, most of the non-technical teams reported difficulty understanding the tech lingo. This also manifests in being unable to properly understand, track and prioritize requests to and from the Core team. </p>"},{"location":"Discoveries/Gnoland-TPM-audit/#strengths","title":"Strengths","text":"<p>During the audit a number of team strengths were manifested. We'd want to reinforce these strengths as much as possible, or at the very least not harm them.</p> <ul> <li>High sense of agency. Core team members aren't just waiting to be told what to do; they pursue their own ideas to contribute to the project.</li> <li>Balance between tasks relevant to business and passion projects. The team understands that we need to deliver business value and they are keen on having a roadmap that would help them prioritize their work.</li> <li>Well organized despite a lack of project framework. This is a great indicator of the Core team's motivation and seniority.</li> <li>Good async collaboration. Almost everything happens on GitHub. Online meetings serve as checkpoints. No DMs. Almost no unconstructive criticism.</li> </ul>"},{"location":"Discoveries/Gnoland-TPM-audit/#action-plan","title":"Action Plan","text":""},{"location":"Discoveries/Gnoland-TPM-audit/#improve-the-pr-review-process","title":"Improve the PR review process","text":"<p>Goal: Reduce the PR review loop to a state where there aren't any blockers to ongoing development and external contributors feel recognized.</p> <p>Short term</p> <p>Success metric: Reduce the non-draft PR backlog by 50% (Mar 26: 94 open non-draft PRs)</p> <p>Week 1 1. Each team member reviews their current non-draft PRs     1. Close PRs that are no longer relevant     2. If needed, update relevant PRs     3. For blocked PRs leave a comment explaining the unblock criteria</p> <p>Week 2</p> <ol> <li>Set aside 2-3 days in the week for the whole team to review the non-draft PRs</li> <li>Take inventory of the remaining non-draft PRs at the end of the week</li> </ol> <p>Long term</p> <p>Success metric: PR review loop is &lt;2 weeks for the initial review (surface scan, no deep dive into the code) for Core PRs, &lt;1 week for external contributors</p> <ol> <li>Define and implement the new PR review process, with special consideration for bugs vs new features, as well as priority.</li> <li>TPM takes ownership over the PR triage process, incl. getting Jae's reviews</li> <li>Update the PR Review Session agenda &amp; take ownership of the meeting</li> </ol>"},{"location":"Discoveries/Gnoland-TPM-audit/#introduce-the-roadmap","title":"Introduce the roadmap","text":"<p>Goal: Align the Core team's development effort toward a common goal. Make stakeholders confident that were making progress and building something of value</p> <p>Short term</p> <p>Success metric: All Core team members and key stakeholders have signed off on the roadmap.</p> <p>Testnet4 roadmap 1. Align with the Core team on the Testnet4's feature set 2. Define drivers for each Testnet4 deliverable 3. Build and maintain a DAG-based roadmap that's able to inform all internal and external stakeholders of the progress, both on the strategic (epic) and tactical (issue/PR) level 4. Communicate out the Testnet4 roadmap and its progress regularly 5. Track the engineer progress against the roadmap, and help prioritize work relevant to the roadmap</p> <p>Long term</p> <p>Success metric: All Core team members and key stakeholders have signed off on the roadmap.</p> <p>The road to mainnet 1. Align with leadership and the Core team on what the next era/milestone should be on the road to mainnet launch 2. Build and maintain a DAG-based roadmap that's able to inform all internal and external stakeholders of our plan on a strategic (epic) level 3. Communicate out the road to mainnet on a regular basis</p>"},{"location":"Discoveries/Gnoland-TPM-audit/#bridge-the-technical-communication-gap","title":"Bridge the technical communication gap","text":"<p>Goal: Everyone knows what the Core team is building</p> <p>Success metric: all stakeholders understand our roadmap, how they need to contribute, and feel they are regularly updated </p> <ol> <li>Transfer ownership of meetings to TPM wherever it makes sense</li> <li>Reduce the number of input requirements from the Core team to a single document</li> <li>Maintain the Notion project board with a strategic Gno.land roadmap and external dependencies, and look for opportunities to automate the process</li> <li>Write and maintain artifacts that simplify technical information</li> </ol>"},{"location":"communication/discord/","title":"Discord","text":""},{"location":"communication/discord/#overview","title":"Overview","text":"<p>We utilize Discord to foster community interaction and collaboration among teams both within and outside of our company.</p>"},{"location":"communication/discord/#gnoland","title":"Gno.land","text":"<p>At the heart of our community lies the Gno.land team, who actively engages with our members through the official Discord channel. This channel serves as a vibrant space for community interactions and discussions.</p>"},{"location":"communication/discord/#cross-team-communication","title":"Cross-Team Communication","text":"<p>Our community Discord also features private channels specifically designed for seamless communication between different teams. This enables effective collaboration and knowledge-sharing beyond the confines of our company, promoting a thriving ecosystem of like-minded individuals.</p>"},{"location":"communication/discord/#exploring-beyond","title":"Exploring Beyond","text":"<p>In addition to our primary Discord channel, the Gno.land team actively participates in other Discord servers to extend our connections and reach. One notable server where you can find us is the Adena Wallet Discord, where we engage with a broader audience and exchange insights on various topics.</p>"},{"location":"communication/signal/","title":"Signal","text":""},{"location":"communication/signal/#overview","title":"Overview","text":"<p>We utilize Signal for day-to-day discussions across different teams in AiB.</p>"},{"location":"communication/signal/#gnoland","title":"Gno.land","text":"<p>The Gno.land team utilizes Signal as a secure and private communication medium to foster effective discussions with both team members and community contributors.</p>"},{"location":"communication/signal/#active-channels","title":"Active Channels","text":"<p>Within our Signal platform, we have established various channels to facilitate focused and transparent discussions. Some of the key active channels include:</p> <ul> <li>Grant &amp; Partner Program: This dedicated area serves as a hub for discussing grant applications and exploring   potential partnerships with external entities.</li> <li>Gno-Tech-Staff: A discussion area for the core Gno.land engineering team. We try to keep most discussions public,   and visible to other contributors in the space, so this channel is used mostly for internal matters.</li> <li>Gno-Core-Contribs: This shared \"forum\" area serves as a central space for essential discussions between the core   team and developers or development teams working on Gno.land. It fosters collaboration and coordination among key   stakeholders.</li> </ul> <p>Please reach out to your team members if you want to be added to a relevant Signal channel. Gno-Tech-Staff and * Gno-Core-Contribs* are mandatory for core Gno.land staff.</p>"},{"location":"communication/slack/","title":"Slack","text":""},{"location":"communication/slack/#overview","title":"Overview","text":"<p>Slack is the primary medium of communication within All in Bits.</p> <p>Below, you can find some of the official Slack channels, as well as an overview of existing team-specific channels.</p>"},{"location":"communication/slack/#general-channels","title":"General channels","text":"<ul> <li>#events - This channel is for all employees to discuss conferences, events, and speaking engagements   opportunities</li> <li>#finance - A place to ask questions or make requests related to purchasing, reimbursements, payroll or anything   else finance related</li> <li>#general - This channel is for team-wide communication and announcements. All team members are in this channel</li> <li>#hr - Your one-stop HR and People-Ops shop! If you have any HR-related questions, career development questions,   BambooHR or Org chart needs/updates, questions about benefits, policies, or anything else that might come up, we are   at your service!</li> <li>#it-support - Ask for IT for help or account access questions</li> <li>#legal - This channel is for all employees to ask the Legal team quick questions</li> <li>#mad-props - Want to give props to someone that did something great? Let everyone know here</li> <li>#marketing - This channel is for all employees to ask the Marketing Team questions about comms, get updates on   projects, make suggestions, etc</li> <li>#news - This channel is for important company-wide announcements</li> <li>#quotes - Got any great quotes? Please share with us</li> <li>#random - A place for non-work-related flimflam, faffing, hodge-podge or jibber-jabber you\u2019d prefer to keep out   of more focused work-related channels</li> <li>#random-music - To share music with others \u2014 and camaraderie</li> <li>#random-petsofaib - Cute fur baby or animal? Share with the team</li> <li>#security - If you have any quick security questions or issues you can ask on this channel</li> <li>#rust - A Slack channel where Rust is not pushed down people's throats. Usually :)</li> <li>#zk - Join in and discuss all things Zero Knowledge!</li> </ul>"},{"location":"communication/slack/#team-channels","title":"Team channels","text":""},{"location":"communication/slack/#gnoland","title":"Gno.land","text":""},{"location":"communication/slack/#main-channels","title":"Main Channels","text":"<ul> <li>#gno-core-tech - The most important channel engineering-wise. We share our discussions here</li> <li>#game-of-realms - A channel for discussing the ongoing Game of Realms competition</li> <li>#gno-by-example - Channel for coordinating changes and improvements   for Gno By Example</li> <li>#gno-docs - One-stop-shop for discussing   the official Gno.land documentation </li> <li>#gno-ide - The Gno IDE team primary communication channel</li> <li>#gno-infra - Chambers of the magic DevOps magician Albert, where we discuss infrastructure related topics   regarding Gno</li> <li>#gno-performances - Slack channel connected to a Gno performance testing tool called Supernova, which outputs   daily TPS reports</li> <li>#gnoland-grants-partners - Rendez-vous channel for the engineering team and marketing / business relations to   discuss ongoing partner acquisition efforts</li> <li>#gnoland-marketing - The main entry point for all things related to Gno marketing</li> <li>#tokenomics - Channel for discussing ongoing tokenomics efforts (network fees, network currency...)</li> </ul>"},{"location":"communication/slack/#partner-channels","title":"Partner Channels","text":"<ul> <li>#gnoland-onbloc - The main communication channel between the Gno core team and OnBloc</li> <li>#gnoland-teritori - The main communication channel between the Gno core team and Teritori</li> <li>#gno-governance-module - A temporary channel to discuss ongoing Governance module efforts; it is made up by some   core contributors</li> </ul>"},{"location":"engineering/conventions/documentation/","title":"Documentation","text":"<p>Table of Contents</p>"},{"location":"engineering/conventions/documentation/#documentation","title":"Documentation","text":""},{"location":"engineering/conventions/documentation/#general-best-practices","title":"General Best Practices","text":"<p>People read documentation in order to achieve a goal. Whenever you write a new piece you should keep their goal in mind.</p> <p>For instance, you're currently reading this document. What is your goal? Maybe you want to improve the documentation of your own project, or perhaps you've been told this is an awesome document and your goal is simply to enjoy reading a beautiful text of astonishing beauty.</p> <p>On the other hand I know you're a developer, so there's no point explaining what source code is. That would seem patronizing or a waste of time.</p> <p>I also know that most of us don't speak English as a first language. Unnecessarily complicated words or sentences are then obstacles to our communication.</p> <p>Finally, I know you're a diverse group. Among the readers of this document you'll find people from everywhere on the gender spectrum, different races, and different sensibilities. I do not wish to alienate any of them, so I need to be careful with the words I choose.</p> <p>All of these concrete examples can be boiled down to the following best practices.</p>"},{"location":"engineering/conventions/documentation/#state-a-clear-goal","title":"State A Clear Goal","text":""},{"location":"engineering/conventions/documentation/#define-a-scope","title":"Define A Scope","text":""},{"location":"engineering/conventions/documentation/#keep-it-simple","title":"Keep It Simple","text":""},{"location":"engineering/conventions/documentation/#dont-alienate-the-reader","title":"Don't Alienate The Reader","text":""},{"location":"engineering/conventions/documentation/#keep-accessibility-in-mind","title":"Keep Accessibility In Mind","text":""},{"location":"engineering/conventions/documentation/#arbitrary-choices-and-consistency","title":"Arbitrary Choices And Consistency","text":""},{"location":"engineering/conventions/documentation/#documentation-artifacts","title":"Documentation Artifacts","text":""},{"location":"engineering/conventions/documentation/#readmemd","title":"README.md","text":"<p>TL;DR:</p> <ul> <li>Audience: Everyone.</li> <li>Content: Description of the project and its current state. Links to other resources.</li> <li>Template: README.tmpl.md</li> <li>Example: https://github.com/twbs/bootstrap/blob/v4-dev/README.md</li> </ul>"},{"location":"engineering/conventions/documentation/#contributingmd","title":"CONTRIBUTING.md","text":"<p>TL;DR:</p> <ul> <li>Audience: Contributors.</li> <li>Content: Steps necessary to modify the project, verify the changes, and contribute back to the project.</li> <li>Template: CONTRIBUTING.md</li> <li>Example: https://github.com/angular/angular.js/blob/master/README.md</li> </ul>"},{"location":"engineering/conventions/documentation/#reference-material","title":"Reference Material","text":"<p>TL;DR:</p> <ul> <li>Audience: Users of the project.</li> <li>Content: List of all of the features of the project with full information on arguments, flags, and others.</li> <li>Example: https://docs.angularjs.org/api</li> </ul>"},{"location":"engineering/conventions/documentation/#release-notes","title":"Release Notes","text":"<p>TL;DR:</p> <ul> <li>Audience: Contributors and users of the project.</li> <li>Content: New features, bug fixes, and other relevant changes since the previous version was released.</li> <li>Example: https://golang.org/doc/go1.9</li> </ul>"},{"location":"engineering/conventions/documentation/#guidestutorials","title":"Guides/Tutorials","text":"<p>TL;DR:</p> <ul> <li>Audience: New users of the project.</li> <li>Content: Detailed guide on how to accomplish something specific using the project.</li> <li>Example: https://docs.angularjs.org/tutorial</li> </ul>"},{"location":"engineering/conventions/documentation/#code-of-conduct","title":"Code of Conduct","text":"<p>TL;DR:</p> <ul> <li>Audience: Contributors</li> <li>Content: Rules governing the contributor community and their interactions with each other.</li> <li>Example: https://www.contributor-covenant.org/</li> </ul>"},{"location":"engineering/conventions/documentation/#issue-templates","title":"Issue Templates","text":""},{"location":"engineering/conventions/documentation/#other-pieces-of-documentation","title":"Other Pieces Of Documentation","text":""},{"location":"engineering/conventions/documentation/#resources","title":"Resources","text":"<ul> <li>Google Developer Documentation Style Guide</li> <li>Avoiding sexist languageS</li> <li>Disabling Ableist Language</li> <li>Semantic Versioning</li> </ul>"},{"location":"engineering/conventions/go/","title":"Go Development Conventions","text":""},{"location":"engineering/conventions/go/#introduction","title":"Introduction","text":"<p>This guide documents development conventions for Go at AiB. Check general conventions for language-independent conventions that are also applicable to Go projects.</p>"},{"location":"engineering/conventions/go/#supported-go-versions","title":"Supported Go Versions","text":"<ul> <li>Our libraries support the latest two stable major versions of Go. Both versions should be included in CI.</li> <li>Our applications support only the latest stable Go version.</li> </ul>"},{"location":"engineering/conventions/go/#dependency-management","title":"Dependency Management","text":"<p>If your project is a library or an application:</p> <ul> <li>Use modules to manage dependencies.</li> <li>Do not check in the <code>vendor</code> directory into git.</li> </ul>"},{"location":"engineering/conventions/go/#code-generation","title":"Code Generation","text":"<ul> <li>All generated code should be always processed by <code>gofmt</code>.</li> <li>Generated code should have a <code>// Code generated ... DO NOT EDIT.</code> comment before the package clause, but not attached   to it (see convention).</li> </ul>"},{"location":"engineering/conventions/go/#docker","title":"Docker","text":"<ul> <li>If you use alpine-based images, your binaries need to be built with <code>CGO_ENABLED=0</code>. If your project uses <code>cgo</code>, you   will have to use alpine for the build of binaries for Docker.</li> </ul>"},{"location":"engineering/conventions/go/#testing","title":"Testing","text":"<ul> <li>Use testify.</li> </ul>"},{"location":"engineering/conventions/go/#error-handling","title":"Error handling","text":"<p>Use the standard <code>errors</code> package and wrap errors using <code>%w</code> when needed.</p>"},{"location":"engineering/conventions/go/#logging","title":"Logging","text":"<ul> <li>Use logging in your applications.</li> <li>Use zerlog.</li> </ul>"},{"location":"engineering/conventions/go/#other-libraries","title":"Other libraries","text":"<p>Missing info</p> <p>TODO: fill with other generally used libraries.</p>"},{"location":"engineering/conventions/go/#best-practices","title":"Best Practices","text":"<ul> <li>Use <code>gofmt</code>, <code>goimports</code>, <code>go vet</code>.</li> <li>Use <code>golangci-lint</code>. Configuration example here</li> <li>Follow community well-established best practices: Effective Go   and Go Code Review Comments.</li> </ul>"},{"location":"engineering/conventions/go/#group-code-blocks-with-blank-lines","title":"Group code blocks with blank lines","text":"<p>To improve readability, we use single blank lines to separate logic blocks of code inside functions. A blank line is usually added after the end of any control structure, too.</p>"},{"location":"engineering/conventions/go/#naming","title":"Naming","text":"<p>For naming: follow Uber Go style guide</p> <ul> <li>Errors</li> <li>Packages</li> <li>Prefer full names (e.g. <code>Repository</code>, not <code>Repo</code>).</li> </ul>"},{"location":"engineering/conventions/go/#cli","title":"CLI","text":"<ul> <li>Put sources for your executable commands in <code>cmd/&lt;command-name&gt;/</code>, with the <code>main</code> function   in <code>cmd/&lt;command-name&gt;/main.go</code>.</li> <li>We use ff extensively for CLI options parsing.</li> <li>Implement commands in a subpackage.</li> </ul>"},{"location":"engineering/conventions/go/#configuration","title":"Configuration","text":"<ul> <li>Use environment variables for configuration.</li> </ul> <p>Missing info</p> <p>TODO: Add other possible configurations</p>"},{"location":"engineering/gno.land/first-challenges/","title":"First Challenges","text":""},{"location":"engineering/gno.land/first-challenges/#1-week","title":"1 week","text":"<ul> <li>Set up a local dev environment without blockchain (gno cli)</li> <li>Set up a local dev environment with blockchain (gnoland + gnoweb + gnokey)</li> <li>Write contracts</li> </ul>"},{"location":"engineering/gno.land/first-challenges/#1-month","title":"1 month","text":"<ul> <li>Contribute pull requests for contracts, toolings, and developer experience, based on daily job needs</li> <li>Participate in peer code reviews</li> </ul>"},{"location":"engineering/gno.land/first-challenges/#3-months","title":"3 months","text":"<ul> <li>Contribute to at least one advanced topic outside of contracts</li> <li>Regularly contribute to the project</li> <li>Actively review pull requests</li> <li>Take on assigned tasks with enthusiasm</li> <li>Share your preferences for specific project focus areas</li> </ul>"},{"location":"engineering/gno.land/first-challenges/#6-months","title":"6 months","text":"<ul> <li>(Co-)Lead a part of the project, such as a package or a domain, demonstrating strong leadership skills and expertise.</li> </ul>"},{"location":"engineering/gno.land/intro/","title":"Introduction","text":""},{"location":"engineering/gno.land/intro/#what-is-gnoland","title":"What is Gno.land?","text":"<p>Gno.land is a Layer 1 blockchain platform that enables the execution of Smart Contracts using an interpreted version of the Go programming language called Gnolang (Gno for short).</p>"},{"location":"engineering/gno.land/intro/#key-features-and-technology","title":"Key Features and Technology","text":"<ol> <li>Interpreted Gnolang: Gno.land utilizes the Gnolang programming language, which is based on Go. It is executed    through a specialized virtual machine called the GnoVM, purpose-built for the Gno.land blockchain. While Gnolang    shares similarities with Go in terms of syntax, it currently lacks go routine support. However, this feature is    planned for future development, ensuring deterministic GnoVM executions.</li> <li>Consensus Protocol - Tendermint2: Gno.land achieves consensus between blockchain nodes using the Tendermint2    consensus protocol. This approach ensures secure and reliable network operation.</li> <li>Inter-Blockchain Communication (IBC): In the future, Gno.land will be able to communicate and exchange data with    other blockchain networks within the Cosmos ecosystem through the Inter-Blockchain Communication (IBC) protocol.</li> </ol>"},{"location":"engineering/gno.land/intro/#why-go-based","title":"Why Go-based?","text":"<p>The decision to base Gno.land's language on Go was influenced by the following factors:</p> <ol> <li>Standard and Secure Language: Go is a well-established and secure programming language, widely adopted in the    software development community. By leveraging Go's features, Gno.land benefits from a robust and proven foundation.</li> <li>User-Friendly: Go's simplicity and ease of understanding make it beginner-friendly. This accessibility lowers the    entry barrier for developers to create Smart Contracts on the Gno.land platform.</li> </ol>"},{"location":"engineering/gno.land/intro/#how-does-it-compare-with-ethereum","title":"How does it compare with Ethereum?","text":"<p>In comparison to Ethereum, Gno.land offers distinct advantages:</p> <ol> <li> <p>Transparent and Auditable Smart Contracts: Gno.land Smart Contracts are fully transparent and auditable by users    because the actual source code is uploaded to the blockchain. In contrast, Ethereum uses Solidity, which    requires precompilation into bytecode, leading to less transparency as bytecode is stored on the blockchain, not the    human-readable source code.</p> </li> <li> <p>General-Purpose Language: Gno.land's Gnolang is a general-purpose language, similar to Go, extending its    usability beyond the context of blockchain. In contrast, Solidity is designed specifically for Smart Contracts on the    Ethereum platform.</p> </li> </ol>"},{"location":"engineering/gno.land/intro/#are-there-similar-platforms","title":"Are there similar platforms?","text":"<p>If you're interested in exploring other platforms with comparable functionalities, you may consider:</p> <ul> <li>Aptos</li> <li>CosmWasm</li> </ul>"},{"location":"engineering/gno.land/resources/","title":"Resources","text":""},{"location":"engineering/gno.land/resources/#official-docs","title":"Official Docs","text":"<p>Coming soon!</p>"},{"location":"engineering/gno.land/resources/#workshops-and-presentations","title":"Workshops and Presentations","text":"<p>We take pride in sharing our knowledge with the community worldwide through workshops and presentations. You can explore the complete list of our workshops here.</p>"},{"location":"engineering/gno.land/resources/#gno-by-example","title":"Gno By Example","text":"<p>Gno By Example is a community-dedicated web app that showcases the fundamentals of Gnolang, the Smart Contract language used on Gno.land. We welcome you to contribute to the official Gno By Example repository.</p>"},{"location":"engineering/gno.land/resources/#awesome-gno-repository","title":"Awesome Gno Repository","text":"<p>For a wealth of community resources related to Gno, check out our awesome-gno repository. It's a curated collection of tools, libraries, and other valuable assets created and shared by Gno enthusiasts.</p>"},{"location":"engineering/gno.land/resources/#youtube-channel","title":"YouTube Channel","text":"<p>We maintain a YouTube channel called @_gnoland, where you can find talks and video tutorials from previous conferences and workshops.</p>"},{"location":"engineering/gno.land/setup/","title":"Setup","text":""},{"location":"engineering/gno.land/setup/#contributing","title":"Contributing","text":"<p>We tend to keep an updated <code>CONTRIBUTING.md</code>, which contains relevant setup and workflow information about Gno. You can find it on the official Gno repo, here.</p>"},{"location":"engineering/gno.land/setup/#local-repo-setup","title":"Local repo setup","text":"<p>To begin, clone the repository locally using the following command:</p> <pre><code>git clone https://github.com/gnolang/gno.git\n</code></pre>"},{"location":"engineering/gno.land/setup/#building-installing-binaries","title":"Building &amp; installing binaries","text":"<p>To build and globally install local gno binaries, follow these steps:</p>"},{"location":"engineering/gno.land/setup/#building-installing-from-gnoland","title":"Building &amp; installing from <code>./gno.land</code>","text":"<p>Navigate to the <code>./gno.land</code> subfolder and execute:</p> <pre><code>make build &amp;&amp; make install\n</code></pre>"},{"location":"engineering/gno.land/setup/#building-installing-from-gnovm","title":"Building &amp; installing from <code>./gnovm</code>","text":"<p>Navigate to the `./gnovm`` subfolder and execute:</p> <pre><code>make build &amp;&amp; make install\n</code></pre>"},{"location":"engineering/gno.land/setup/#running-go-tests","title":"Running (Go) tests","text":"<p>To run the entire local testing suite, execute the following command from the project root:</p> <pre><code>make test\n</code></pre> <p>This will execute the tests in the following project components:</p> <ul> <li>tm2</li> <li>gnovm</li> <li>gno.land</li> <li>examples</li> </ul>"},{"location":"engineering/gno.land/setup/#running-gno-tests","title":"Running (Gno) tests","text":"<p>Before running <code>*_test.gno</code> test files, ensure you have the gno binary installed. If not, follow the steps in Building &amp; installing binaries from <code>gno.land</code>.</p> <p>After installing the <code>gno</code> binary, you can execute the gno command as follows:</p> <pre><code>gno --help\n</code></pre> <p>To test a specific package, run:</p> <pre><code>gno test path/to/package\n</code></pre> <p>Additionally, you might need to specify the path to the root-dir in the gno test command. This is the absolute path to the locally cloned gno repo. For example:</p> <pre><code>gno test --root-dir /Users/zmilos/Work/gno path/to/package\n</code></pre>"},{"location":"engineering/gno.land/setup/#clearing-out-local-data","title":"Clearing out local data","text":"<p>As the local blockchain node runs, it creates on-disk temporary storage. To clear these subdirectories, run the following commands:</p> <p>From the <code>./gno.land</code> subfolder:</p> <pre><code>make clean &amp;&amp; make fclean\n</code></pre>"},{"location":"engineering/gno.land/team/","title":"Team","text":""},{"location":"engineering/gno.land/team/#core-team","title":"Core Team","text":"<ul> <li>@jaekwon - Jae Kwon</li> <li>@manfred - Manfred Touron</li> <li>@peter7891 - Petar Dambovaliev</li> <li>@mvertes - Marc Vertes</li> <li>@thehowl - Morgan Bazalgette</li> <li>@harry-hov - Hariom Verma</li> <li>@piux2 - Ray Qin</li> <li>@waymobetta - Jon Roethke</li> <li>@tbruyelle - Thomas Bruyelle</li> <li>@albttx - Albert Le Batteux</li> <li>@ajnavarro - Antonio Navarro</li> <li>@zivkovicmilos - Milos Zivkovic</li> <li>@deelawn - Dylan Boltz</li> </ul>"},{"location":"engineering/gno.land/team/#core-contributors","title":"Core Contributors","text":"<ul> <li>@schollz - Zach Schollz (Tinkerer)</li> <li>@ltzmaxwell</li> <li>@giansalex - Giancarlos Salas</li> <li>@anarcher</li> </ul>"},{"location":"engineering/gno.land/team/#onbloc","title":"OnBloc","text":"<p>Onbloc is a leading Gnoland blockchain software company based on South Korea building Adena (repo), Gnoscan (repo) and Gnoswap. Their goal is to make it easy to build applications on Gnoland. They organize meetups, help with booth/event involvement, etc. Onbloc also contributes to various Gno repositories.</p> <ul> <li>@dongwon8247 - Dongwon</li> <li>@r3v4s - Blake</li> <li>@adr-sk - Andrew Kang</li> <li>@jinoosss</li> </ul>"},{"location":"engineering/gno.land/team/#teritori","title":"Teritori","text":"<p>Teritori is an open-source Web3 resilient OS for humans &amp; organizations, soon available on desktop &amp; mobile, with an all-in-one decentralized experience. They are building the GnoDAO Deployer as well as the Moderation DAO; more information can be found within the Gnodaos repository.</p> <p>The Teritori dApp (repo) is an all-in-one decentralized application providing various coordination &amp; communication features for humans. In the future (v3) it will also be a privacy first messaging application built on top of the Berty Protocol.</p> <ul> <li>@zxxma - Antoine</li> <li>@n0izn0iz - Norman Meier</li> <li>@JK Gopher</li> <li>@hthieu1110</li> <li>@omniwired - Juan</li> <li>@Ferryman - Mehdi</li> </ul>"},{"location":"engineering/gno.land/team/#meetings","title":"Meetings","text":"<p>The Gno.land team has established a well-structured meeting schedule to ensure effective communication and collaboration among team members and contributors.</p>"},{"location":"engineering/gno.land/team/#team-meetings","title":"Team Meetings","text":"<p>You can find the team meeting structure and meeting notes here.</p>"},{"location":"engineering/gno.land/team/#weekly-gno-dev-sync","title":"Weekly Gno Dev Sync","text":"<ul> <li>This is a meeting of internal Gno devs and provides opportunities to demo features or new developments, discuss blockers, provide updates on what work is being done, etc. and overall provide visibility into the various goings-on with respect to general Gno development.</li> </ul>"},{"location":"engineering/gno.land/team/#public-gnoland-developer-call","title":"{Public} Gno.Land Developer Call","text":"<ul> <li>This is a meeting where the core team will discuss issues and provide updates on development to the community. Typically, these calls are recorded.</li> </ul>"},{"location":"engineering/gno.land/team/#private-gnoland-developer-call","title":"{Private} Gno.Land Developer Call","text":"<ul> <li>This is a meeting of both internal Gno devs as well as partners of Gno, including Onbloc and Teritori. The objective of the meeting is to provide an interactive session, providing updates on developments on the tech from the core team, as well as contributions, challenges, and milestones that are being worked on.</li> </ul>"},{"location":"engineering/gno.land/team/#company-related-meetings","title":"Company-related Meetings","text":"<ol> <li>Company Townhall<ul> <li>Purpose: The official company-wide townhall meeting, ensuring transparent communication and alignment across the   organization.</li> <li>Schedule: Every other Wednesday at 18:00 CET.</li> <li>Agenda: Share company updates, celebrate achievements, address concerns, and allow employees to ask questions   openly.</li> </ul> </li> </ol>"},{"location":"engineering/gno.land/tools/","title":"Tools","text":""},{"location":"engineering/gno.land/tools/#editors","title":"Editors","text":"<p>At Gno.land, we embrace the diversity of text editors used by our team members for writing code. We believe that individual preferences play a crucial role in creating a productive and enjoyable development experience. Whether you prefer Visual Studio Code, IntelliJ Goland, Emacs, Vim, or any other editor, you are encouraged to use the tool that suits your workflow best.</p> <p>Check out the resources below to make your development experience in Gno more enjoyable:</p> <ul> <li>VS Code plugin</li> <li>Vim Setup</li> <li>Emacs Setup</li> </ul>"},{"location":"engineering/gno.land/tools/#benchmarks","title":"Benchmarks","text":"<ul> <li>Auto-generated Go Benchmark Graphs - We have an automated system that generates benchmark graphs from existing   benchmarks in our codebase. These benchmarks are triggered on each Pull Request (PR) merge, providing valuable   insights into performance improvements or regressions. You can access the aggregated   benchmark graphs here (link pending).</li> <li>Supernova - For stress-testing our Gno node, we utilize a tool called Supernova. This tool bombards the Gno node   with transactions and helps us extract performance metrics such as Transactions Per Second (TPS) and block   utilization. You can explore the Supernova tool and its code repository here.</li> </ul>"},{"location":"engineering/gno.land/tools/#code-coverage","title":"Code Coverage","text":"<p>We employ <code>CodeCov</code> as our main source for measuring code coverage. CodeCov helps us understand the extent to which our code is exercised during testing.</p> <p>You can find the coverage information for the main <code>gno</code> repo here.</p>"},{"location":"knowledge-corner/cosmos/","title":"World of Cosmos","text":""},{"location":"knowledge-corner/cosmos/#what-are-the-projects-in-cosmos","title":"What are the projects in Cosmos?","text":"<p>Here you have an updated list of projects built on top of Cosmos.</p>"},{"location":"knowledge-corner/cosmos/#cosmos-sdk","title":"Cosmos SDK","text":"<p>The Cosmos SDK is an open-source framework for building multi-asset public Proof-of-Stake (PoS) blockchains, like the Cosmos Hub, as well as permissioned Proof-of-Authority (PoA) blockchains. Blockchains built with the Cosmos SDK are generally referred to as application-specific blockchains.</p> <p>The goal of the Cosmos SDK is to allow developers to easily create custom blockchains from scratch that can natively interoperate with other blockchains. We envision the Cosmos SDK as the npm-like framework to build secure blockchain applications on top of CometBFT. </p>"},{"location":"knowledge-corner/blockchains-101/blockchain/","title":"What is a blockchain?","text":"<p>A blockchain is a database formed by a sequence of entries called (you guessed it) blocks.</p> <p>Blockchains have a special characteristic by which any attempt to modify one of its entries would modify the entire chain.</p> <p>It is, therefore, an immutable data structure, which stores blocks in chronological order of insertion.</p> <p>This makes blockchain a perfect storage medium for financial records which need to be audited, such as Bitcoin transactions.</p> <p>In fact, Bitcoin was the first widely adopted application of blockchains for financial record keeping.</p>"},{"location":"knowledge-corner/blockchains-101/blockchain/#block-data-structure","title":"Block Data Structure","text":"<p>Each entry in a blockchain is called a block, which is a data structure that contains a header and a payload.</p> <p>Every blockchain header must have a field that points to the block before. The link from every block to the block before forms the chain of blocks.</p>"},{"location":"knowledge-corner/blockchains-101/blockchain/#genesis-block","title":"Genesis Block","text":"<p>The very first block does not have a previous entry to point to. It, therefore, points back at nothing, which makes it a unique entry. It\u2019s the only block whose <code>hashPrevBlock</code> header field is all zeroes.</p> <p>Because of its unique role, the first block on every blockchain is given a special name: the Genesis Block.</p>"},{"location":"knowledge-corner/blockchains-101/blockchain/#block-structure","title":"Block Structure","text":"<p>The block data structure is relatively simple. It usually consists of some metadata and a payload.</p> <p>The metadata is stored in a section called the block header and usually includes a block timestamp, the unique block hash, the previous block\u2019s hash, the Merkle root, and several other fields. Each blockchain implementation may add or omit different header fields. The format of block headers is not standardized.</p> <p>The payload is usually a binary version of the blocks in the same format they travel through the P2P network.</p> <p>For example, in Bitcoin Core the payload is simply a raw block serialized onto disk storage (written to disk exactly as it travels the network).</p>"},{"location":"knowledge-corner/blockchains-101/blockchain/#block-size","title":"Block Size","text":"<p>Blocks can be of any arbitrary size. There is no preset block size or a general standard for block sizes.</p> <p>From tiny kilobyte-sized blocks to several gigabytes large. Some blockchains don\u2019t even limit the block size, allowing for arbitrary-size data to be stored.</p> <p>As always, there\u2019s a trade-off between block size and efficiency. Making blocks too large will require more processing time to compute the signature (hash) of each block. Large blocks also require more transactions to fill them.</p> <p>Data stored in blocks can be simple transaction scripts, such as those stored in Bitcoin Core, smart contracts (as in Ethereum, Tezos, and others), files of all kinds, images, and even movies.</p> <p>Therefore, it is convenient to choose appropriately sized blocks to store the kind of data required by each specific application.</p> <p>E.g. If the expected average entry is just a few bytes large, such as Bitcoin transactions, then blocks can be limited to the megabyte range and still be capable of storing a reasonable amount of entries.</p> <p>If, on the other hand, a specific application required large binary objects (BLOBs) to be stored on the blockchain, perhaps a larger block size would be convenient.</p>"},{"location":"knowledge-corner/blockchains-101/blockchain/#block-storage","title":"Block Storage","text":"<p>Blocks themselves must be stored somewhere on users\u2019 computers.</p> <p>In Bitcoin Core, and its countless forks, a directory called blocks/ under the data directory will contain data received from the network. This includes the raw blocks and index files designed to quickly access block data.</p> <p>On Bitcoin Core, each block is stored in regular files and contains all the recently mined Bitcoin transactions from the latest blocks.</p> <p>Other cryptocurrencies may use different storage systems, such as SQLite or Berkeley databases.</p> <p>There is no set requirement for block storage, as long as each new block cryptographically references the one before and integrity is guaranteed.</p> <p>Transactions stored in blocks may be out of chronological order, but blocks themselves are always found in order of insertion. The timestamp marking when the block was mined always increases.</p> <p>The data stored in blocks, and committed to the blockchain, cannot be tampered with in any way, regardless of how the data is stored on disk.</p> <p>Any single bit that is changed, in any block in the chain, would change the entire chain signature and allow all other network participants to immediately detect the modification.</p>"},{"location":"knowledge-corner/blockchains-101/blockchain/#cryptographic-hashing","title":"Cryptographic Hashing","text":"<p>Every bit of information contained in a blockchain passes through a process known as cryptographic hashing.</p> <p>This is a secure and well-tested process that is peer-reviewed by cryptanalysts from around the world. The algorithm is chosen such that it does not result in collisions when the same hash code is generated for different pieces of information.</p> <p>Hashing is also performed in a way such that the resulting code cannot be used to recover the originally hashed data. We say that hashing is a one-way process.</p> <p>Each block will have a signature hash that is universally unique and impossible to reproduce, except if you know the original data contained in the block, stored in the exact same order.</p> <p>That last detail is very important. For instance, if you took the exact same transactions and stored them in a different order within a block, the resulting hash would be different. In this case, even though the block would contain the exact same transaction data, the order in which they\u2019re stored is different and this generates a different signature.</p> <p>This illustrates how blockchains do not allow any part of the data to be modified, not even the order in which identical data gets stored.</p>"},{"location":"knowledge-corner/blockchains-101/blockchain/#proof-of-knowledge","title":"Proof of Knowledge","text":"<p>As we\u2019ve seen, Blockchain is a special kind of database that does not allow any kind of data modification.</p> <p>Blocks are recorded in chronological order and this order cannot be modified.</p> <p>Therefore, blockchains prove not only that data is valid, but also at which point in time that data was inserted.</p> <p>For this reason, Blockchains can be used as \u201cproof of knowledge\u201d of information.</p> <p>Using a blockchain you can prove that you knew something at a certain point in time. This was used by the creator of Bitcoin itself when he encoded the following newspaper headline into the very first Bitcoin block ever mined:</p> <p>Quote</p> <p>The Times 03/Jan/2009 Chancellor on brink of second bailout for banks</p> <p>The famous headline is a proof of knowledge timestamped January 3, 2009.</p> <p>It proves that Satoshi Nakamoto had access to that piece of information (a newspaper) on that date. The timestamp cannot be modified.</p> <p>If you wish to prove that you had access to some information at some point in time, all you have to do is hash that information and then store it in a blockchain. In the future, all you have to do is publish your original message and its hash so anyone can verify it.</p>"},{"location":"knowledge-corner/blockchains-101/blockchain/#blockchain-in-finance","title":"Blockchain in Finance","text":"<p>Financial transactions are naturally well suited to be stored in blockchains.</p> <p>Money transfers happen chronologically and a secure, often permanent, record must be kept of each operation.</p> <p>This makes the blockchain perfect for digital cash transactions.</p> <ol> <li> <p>Text summarized and simplified from eli5-blockchain \u21a9</p> </li> </ol>"},{"location":"knowledge-corner/version-control/guide-to-git/","title":"Guide to git","text":""},{"location":"knowledge-corner/version-control/guide-to-git/#git-vs-github","title":"Git vs GitHub","text":"<p>At a high level, GitHub is a website and cloud-based service that helps developers store and manage their code, as well as track and control changes to their code. To understand exactly what GitHub is, you need to know two connected principles:</p> <ul> <li>Version control</li> <li>Git</li> </ul>"},{"location":"knowledge-corner/version-control/guide-to-git/#what-is-version-control","title":"What is version control?","text":"<p>Version control helps developers track and manage changes to a software project\u2019s code. As a software project grows, version control becomes essential. Take WordPress\u2026</p> <p>At this point, WordPress is a pretty big project. If a core developer wanted to work on one specific part of the WordPress codebase, it wouldn\u2019t be safe or efficient to have them directly edit the \u201cofficial\u201d source code.</p> <p>Instead, version control lets developers safely work through branching and merging.</p> <p>With branching, a developer duplicates part of the source code (called the repository). The developer can then safely make changes to that part of the code without affecting the rest of the project.</p> <p>Then, once the developer gets his or her part of the code working properly, he or she can merge that code back into the main source code to make it official.</p> <p>All of these changes are then tracked and can be reverted if need be.</p>"},{"location":"knowledge-corner/version-control/guide-to-git/#what-is-git","title":"What Is Git?","text":"<p>Git is a specific open-source version control system created by Linus Torvalds in 2005.</p> <p>Specifically, Git is a distributed version control system, which means that the entire codebase and history are available on every developer\u2019s computer, which allows for easy branching and merging.</p>"},{"location":"knowledge-corner/version-control/guide-to-git/#what-is-github","title":"What Is GitHub?","text":"<p>GitHub is a for-profit company that offers a cloud-based Git repository hosting service. Essentially, it makes it a lot easier for individuals and teams to use Git for version control and collaboration.</p> <p>GitHub\u2019s interface is user-friendly enough so even novice coders can take advantage of Git. Without GitHub, using Git generally requires a bit more technical savvy and use of the command line.</p> <p>GitHub is so user-friendly, though, that some people even use GitHub to manage other types of projects \u2013 like writing books.</p> <p>Additionally, anyone can sign up and host a public code repository for free, which makes GitHub especially popular with open-source projects.</p> <p>As a company, GitHub makes money by selling hosted private code repositories, as well as other business-focused plans that make it easier for organizations to manage team members and security.</p>"},{"location":"knowledge-corner/version-control/guide-to-git/#exploring-the-github-interface","title":"Exploring The GitHub Interface","text":"<p>To give you a basic understanding of what the GitHub interface looks like, here\u2019s the WordPress source code hosted at a GitHub repository.</p> <p>From here, you can view the various branches that are being worked on, as well as when someone made a commit (this is kind of like \u201csaving\u201d a file). Depending on how a repository is set up, you also might be able to create your own branch and make your own commits there.</p> <p>And once you made some changes, you could submit that code back to a branch by making a pull request. A pull request is basically asking the person in charge of the branch to include your code. And it also helps that person see exactly what you\u2019ve changed in the code.</p> <p>If you wanted to edit some or all of the WordPress source code on your own account on a more permanent basis, you could also fork it by clicking the Fork button (a fork is similar in concept to a branch, but a fork is copying the repository into your account).</p> <p>WordPress itself was originally a fork of b2/cafelog. If you want a bit more information on how you can use GitHub, GitHub\u2019s Hello World guide offers a beginner-friendly tutorial for getting started.</p>"},{"location":"knowledge-corner/version-control/guide-to-git/#git-tools","title":"Git tools","text":"<ul> <li>Git Fork: Visual git client.</li> <li>GitHub CLI: Do GitHub operations easily from the CLI.</li> </ul>"},{"location":"knowledge-corner/version-control/guide-to-git/#more-resources","title":"More resources","text":"<ul> <li>Visual Git Reference</li> <li>Play with git operations and visualize what is happening   internally: Visualizing git</li> <li>Hello world with git on GitHub.</li> </ul>"},{"location":"knowledge-corner/version-control/guide-to-git/#visualize-git","title":"Visualize Git","text":"<p>Git can be complicated, but that does not mean necessarily it can not be understood unless you are a git expert. You all probably have used git at some point in your development stages and you are familiar with the basics.</p>"},{"location":"knowledge-corner/version-control/guide-to-git/#our-starting-point","title":"Our starting point","text":"<p>Below representation will be our visual workspace.</p> <p></p> <p>This is our repository and it has several commits and branches in it. First, we have an initial commit (the root of our tree) at the top, after which we have 3 commits (added contributors , improvements, and refactor), whose parents are the same. As you see, we also have 3 branches, master, feature1, and feature2. We also have HEAD which we will talk about in a bit.</p>"},{"location":"knowledge-corner/version-control/guide-to-git/#what-is-head-and-head","title":"What is HEAD and HEAD~?","text":"<p>We will move HEAD from time to time in our visual graph. HEAD is nothing more than a pointer in your git workflow, it just marks where you are. Now in order to mark other locations, we might need a reference point. That is for instance, if I need to explain to someone where the commit refactor is, I can just say go 2 commits above HEAD and there you will find it. Thus HEAD~1 is like saying \"the commit above HEAD\" and similarly HEAD~2 is equal to saying \"the commit 2 steps above HEAD\". By the way HEAD~ is the same as HEAD~1.</p> <p>In order to prove our point let us execute git checkout feature2:</p> <p></p>"},{"location":"knowledge-corner/version-control/guide-to-git/#what-is-soft-and-hard","title":"What is <code>--soft</code> and <code>--hard</code>","text":"<ul> <li><code>git reset --soft HEAD~</code> - move back one commit and keep your changes</li> <li><code>git reset --hard HEAD~</code> - move back one commit and discard all changes</li> </ul>"},{"location":"knowledge-corner/version-control/guide-to-git/#modify-a-commit","title":"Modify a commit","text":"<p>You might sometimes commit a work-in-progress and immediately realize you forgot to add something to the commit.</p> <ul> <li><code>git add</code> - add the missing/modified file(s) you forgot to add</li> <li><code>git commit --amend --no-edit</code> - alter the previous commit (remove <code>--no-edit</code> if you want to modify the commit   message)</li> </ul> <p>This will replace your commit with a fresh new one. Now let's see what changed in our visual graph. The only modification was to the hash of our commit. That means we changed the contents of this commit.</p> <p></p>"},{"location":"knowledge-corner/version-control/guide-to-git/#committed-to-master-instead-of-a-new-branch","title":"Committed to master instead of a new branch?","text":"<p>We were working casually and finished our work, only to commit to master instead of another branch. Ah, a silly mistake indeed. You can see our mistake in the graph below.</p> <p></p> <ul> <li><code>git branch feature3</code> - create a new branch at your current position</li> <li><code>git reset HEAD~ --hard</code> - take back master to the previous commit</li> <li><code>git checkout feature3</code> - switch to your new branch</li> </ul> <p></p> <p>Okay seems like we now have a branch called feature3 and we successfully recovered our master to where it belongs. HEAD is pointing to the feature3 branch and that's what we expect from the last action we took above.</p>"},{"location":"knowledge-corner/version-control/guide-to-git/#committed-to-the-wrong-branch","title":"Committed to the wrong branch","text":"<p>This is a very common scenario and it has an easy fix, unless you have pushed your changes.</p> <p> </p> <ul> <li><code>git checkout feature2</code> - switch to another branch</li> <li><code>git stash pop</code> - unpack your changes from stash</li> </ul> <p></p> <ul> <li><code>git add .</code> - add your files and commit them normally</li> <li><code>git commit -m \"fixed\"</code></li> </ul> <p></p>"},{"location":"knowledge-corner/version-control/guide-to-git/#i-want-to-revert-this-specific-commit-from-10-days-before","title":"I want to revert this specific commit from 10 days before","text":"<ul> <li><code>git log</code> - find the hash of that commit you want to revert</li> <li><code>git revert &lt;hash&gt;</code></li> </ul> <p>This action creates a revert commit, meaning it does NOT modify any of your previous commits and just creates a new commit with the exact opposite file modifications. You can see the reverse commit below, a whole new commit.</p> <p></p>"},{"location":"knowledge-corner/version-control/guide-to-git/#i-lost-my-commit","title":"I lost my commit!","text":"<p>It is best we visualize this one to understand what's coming step by step.</p> <p>Imagine checking out a specific commit, in this case refactor.</p> <pre><code>$ git checkout c5b64\nNote: checking out 'c5b647'.\n\nYou are in 'detached HEAD' state...\n</code></pre> <p></p> <p>What does that even mean? Pretty much nothing is unrecoverable in git except that previously mentioned hard reset or maybe deleting your folder altogether. A detached HEAD state means you are pointing to a commit directly, instead of pointing to a branch.</p> <p>Since we are pointing to a lonely commit, let us change something and commit it and see what happens.</p> <p></p> <p>Seems like we are still in that detached HEAD state. Let's assume we took such an action while not knowing the bits and pieces of git and switched back to master via git checkout master. Clearly we now know, git checkout master in its most basic form is like saying \"Go ahead and just point to master\".</p> <p></p> <p>We checked out some unknown commit somewhere, made some changes and committed it with the name of \"some changes after refactor\" and moved back to master. Now, since you don't know the hash of that \"some changes after refactor\" commit and it does not have an explicit branch attached to it, you have no way of knowing if it's there. Hence, you think after all your developments and improvements, you lost it all and it's time to start from ground zero. Stop right there because git reflog is coming for rescue.</p> <p>We may inspect the output of this command:</p> <pre><code>$ git reflog\n5b35f6d HEAD@{1}: pull ...\nca92d15 HEAD@{2}: ...\n759dab1 HEAD@{3}: commit (merge): ...\n065e269 HEAD@{4}: commit: ...\nf357606 HEAD@{5}: commit: ...\n9u7b45 HEAD@{6}: checkout: moving from master to 9u7b45d272867b63d54f96d4aa57f8ecc479cd0\n</code></pre> <p>That <code>9u7b45 HEAD@{6}: checkout: moving from master to 9u7b45d272867b63d54f96d4aa57f8ecc479cd0</code> should give you a pretty rough idea of what you have done, that is, you have moved to a branchless commit in the past. There it is now, your commit that was drifting in space without any label on it. Now go there and put a label on it, or that is to say, create a branch, whatever.</p>"}]}